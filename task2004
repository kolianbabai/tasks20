Реализуй логику записи в файл и чтения из файла для класса ClassWithStatic.
Метод load должен инициализировать объект включая статические поля данными из файла.
Метод main не участвует в тестировании.
Требования:

    •
    Должна быть реализована возможность сохранения/загрузки объектов типа Solution.ClassWithStatic с помощью методов save/load.
    •
    Класс Solution не должен поддерживать интерфейс Serializable.
    •
    Класс Solution.ClassWithStatic не должен поддерживать интерфейс Serializable.
    •
    Класс Solution.ClassWithStatic должен быть публичным.
    •
    Класс Solution.ClassWithStatic не должен поддерживать интерфейс Externalizable.

package com.javarush.task.task20.task2004;

import java.io.*;

/*
Читаем и пишем в файл статики
*/
public class Solution {
    public static void main(String[] args) {
        //вы можете найти your_file_name.tmp в папке TMP или исправьте outputStream/inputStream
        // в соответствии с путем к вашему реальному файлу
        try {

            File yourFile = File.createTempFile("your_file_name", null);
            OutputStream outputStream = new FileOutputStream(yourFile);
            InputStream inputStream = new FileInputStream(yourFile);

            ClassWithStatic classWithStatic = new ClassWithStatic();
            classWithStatic.i = 3;
            classWithStatic.j = 4;
            classWithStatic.save(outputStream);
            outputStream.flush();

            ClassWithStatic loadedObject = new ClassWithStatic();
            loadedObject.staticString = "something";
            loadedObject.i = 6;
            loadedObject.j = 7;

            loadedObject.load(inputStream);

            if(classWithStatic.equals(loadedObject)){
                System.out.println("yes");
            }else{
                System.out.println("no");
            }

            outputStream.close();
            inputStream.close();

        } catch (IOException e) {
            //e.printStackTrace();
            System.out.println("Oops, something is wrong with my file");
        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("Oops, something is wrong with the save/load method");
        }
    }

    public static class ClassWithStatic {
        public static String staticString = "This is a static test string";
        public int i;
        public int j;

        public void save(OutputStream outputStream) throws Exception {
            PrintWriter printWriter = new PrintWriter(outputStream);
            printWriter.println(staticString);
            printWriter.println(i);
            printWriter.println(j);

            printWriter.flush();
            printWriter.close();
        }

        public void load(InputStream inputStream) throws Exception {

            BufferedReader buff = new BufferedReader(new InputStreamReader(inputStream));

            while (buff.ready()){
                staticString = buff.readLine();
                i = Integer.parseInt(buff.readLine());
                j = Integer.parseInt(buff.readLine());

            }

            buff.close();
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ClassWithStatic that = (ClassWithStatic) o;

            if (i != that.i) return false;
            return j == that.j;

        }

        @Override
        public int hashCode() {
            int result = i;
            result = 31 * result + j;
            return result;
        }
    }
}